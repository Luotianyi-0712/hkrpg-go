// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: MonsterBattleInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MonsterBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId         uint32                  `protobuf:"varint,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	MonsterId        uint32                  `protobuf:"varint,2,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	PLBLNPPNFKA      uint32                  `protobuf:"varint,3,opt,name=PLBLNPPNFKA,proto3" json:"PLBLNPPNFKA,omitempty"`
	PFKALLOMFMA      uint32                  `protobuf:"varint,4,opt,name=PFKALLOMFMA,proto3" json:"PFKALLOMFMA,omitempty"`
	IKONOBGFAFM      *MonsterProperty        `protobuf:"bytes,5,opt,name=IKONOBGFAFM,proto3" json:"IKONOBGFAFM,omitempty"`
	TotalTurns       uint32                  `protobuf:"varint,6,opt,name=total_turns,json=totalTurns,proto3" json:"total_turns,omitempty"`
	TotalDamage      float64                 `protobuf:"fixed64,7,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	TotalHeal        float64                 `protobuf:"fixed64,8,opt,name=total_heal,json=totalHeal,proto3" json:"total_heal,omitempty"`
	TotalDamageTaken float64                 `protobuf:"fixed64,9,opt,name=total_damage_taken,json=totalDamageTaken,proto3" json:"total_damage_taken,omitempty"`
	AKHHLIFKDOO      float64                 `protobuf:"fixed64,10,opt,name=AKHHLIFKDOO,proto3" json:"AKHHLIFKDOO,omitempty"`
	TotalHpRecover   float64                 `protobuf:"fixed64,11,opt,name=total_hp_recover,json=totalHpRecover,proto3" json:"total_hp_recover,omitempty"`
	StageId          uint32                  `protobuf:"varint,12,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	BattleId         uint32                  `protobuf:"varint,13,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	JKAKBJJJNFE      uint32                  `protobuf:"varint,14,opt,name=JKAKBJJJNFE,proto3" json:"JKAKBJJJNFE,omitempty"`
	AttackTypeDamage []*AttackDamageProperty `protobuf:"bytes,15,rep,name=attack_type_damage,json=attackTypeDamage,proto3" json:"attack_type_damage,omitempty"`
	SkillTimes       []*SkillUseProperty     `protobuf:"bytes,16,rep,name=skill_times,json=skillTimes,proto3" json:"skill_times,omitempty"`
	StageType        uint32                  `protobuf:"varint,17,opt,name=stage_type,json=stageType,proto3" json:"stage_type,omitempty"`
	IFJLMBHAOGM      float64                 `protobuf:"fixed64,18,opt,name=IFJLMBHAOGM,proto3" json:"IFJLMBHAOGM,omitempty"`
	DelayCumulate    float64                 `protobuf:"fixed64,19,opt,name=delay_cumulate,json=delayCumulate,proto3" json:"delay_cumulate,omitempty"`
	BFGGCIILGDP      DeathSource             `protobuf:"varint,20,opt,name=BFGGCIILGDP,proto3,enum=DeathSource" json:"BFGGCIILGDP,omitempty"`
	Wave             uint32                  `protobuf:"varint,21,opt,name=wave,proto3" json:"wave,omitempty"`
	GACJAPHGNML      int32                   `protobuf:"varint,22,opt,name=GACJAPHGNML,proto3" json:"GACJAPHGNML,omitempty"`
	Phase            uint32                  `protobuf:"varint,23,opt,name=phase,proto3" json:"phase,omitempty"`
	HCCPJHFOEMA      uint32                  `protobuf:"varint,24,opt,name=HCCPJHFOEMA,proto3" json:"HCCPJHFOEMA,omitempty"`
	OMBBCICKGLK      BattleTag               `protobuf:"varint,25,opt,name=OMBBCICKGLK,proto3,enum=BattleTag" json:"OMBBCICKGLK,omitempty"`
	SkillInfo        []*LLNHNHHLCIP          `protobuf:"bytes,26,rep,name=skill_info,json=skillInfo,proto3" json:"skill_info,omitempty"`
	AMDHNDFLMGD      uint32                  `protobuf:"varint,27,opt,name=AMDHNDFLMGD,proto3" json:"AMDHNDFLMGD,omitempty"`
	BJFOPABIFMB      []*MonsterPhaseStt      `protobuf:"bytes,28,rep,name=BJFOPABIFMB,proto3" json:"BJFOPABIFMB,omitempty"`
	BMOLAPHKIKH      uint32                  `protobuf:"varint,29,opt,name=BMOLAPHKIKH,proto3" json:"BMOLAPHKIKH,omitempty"`
	MLNOOCHGLJP      uint32                  `protobuf:"varint,30,opt,name=MLNOOCHGLJP,proto3" json:"MLNOOCHGLJP,omitempty"`
	ONLFPAADPNN      CMHFGEPJLFL             `protobuf:"varint,31,opt,name=ONLFPAADPNN,proto3,enum=CMHFGEPJLFL" json:"ONLFPAADPNN,omitempty"`
}

func (x *MonsterBattleInfo) Reset() {
	*x = MonsterBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MonsterBattleInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterBattleInfo) ProtoMessage() {}

func (x *MonsterBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MonsterBattleInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterBattleInfo.ProtoReflect.Descriptor instead.
func (*MonsterBattleInfo) Descriptor() ([]byte, []int) {
	return file_MonsterBattleInfo_proto_rawDescGZIP(), []int{0}
}

func (x *MonsterBattleInfo) GetEntityId() uint32 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *MonsterBattleInfo) GetMonsterId() uint32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MonsterBattleInfo) GetPLBLNPPNFKA() uint32 {
	if x != nil {
		return x.PLBLNPPNFKA
	}
	return 0
}

func (x *MonsterBattleInfo) GetPFKALLOMFMA() uint32 {
	if x != nil {
		return x.PFKALLOMFMA
	}
	return 0
}

func (x *MonsterBattleInfo) GetIKONOBGFAFM() *MonsterProperty {
	if x != nil {
		return x.IKONOBGFAFM
	}
	return nil
}

func (x *MonsterBattleInfo) GetTotalTurns() uint32 {
	if x != nil {
		return x.TotalTurns
	}
	return 0
}

func (x *MonsterBattleInfo) GetTotalDamage() float64 {
	if x != nil {
		return x.TotalDamage
	}
	return 0
}

func (x *MonsterBattleInfo) GetTotalHeal() float64 {
	if x != nil {
		return x.TotalHeal
	}
	return 0
}

func (x *MonsterBattleInfo) GetTotalDamageTaken() float64 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *MonsterBattleInfo) GetAKHHLIFKDOO() float64 {
	if x != nil {
		return x.AKHHLIFKDOO
	}
	return 0
}

func (x *MonsterBattleInfo) GetTotalHpRecover() float64 {
	if x != nil {
		return x.TotalHpRecover
	}
	return 0
}

func (x *MonsterBattleInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *MonsterBattleInfo) GetBattleId() uint32 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

func (x *MonsterBattleInfo) GetJKAKBJJJNFE() uint32 {
	if x != nil {
		return x.JKAKBJJJNFE
	}
	return 0
}

func (x *MonsterBattleInfo) GetAttackTypeDamage() []*AttackDamageProperty {
	if x != nil {
		return x.AttackTypeDamage
	}
	return nil
}

func (x *MonsterBattleInfo) GetSkillTimes() []*SkillUseProperty {
	if x != nil {
		return x.SkillTimes
	}
	return nil
}

func (x *MonsterBattleInfo) GetStageType() uint32 {
	if x != nil {
		return x.StageType
	}
	return 0
}

func (x *MonsterBattleInfo) GetIFJLMBHAOGM() float64 {
	if x != nil {
		return x.IFJLMBHAOGM
	}
	return 0
}

func (x *MonsterBattleInfo) GetDelayCumulate() float64 {
	if x != nil {
		return x.DelayCumulate
	}
	return 0
}

func (x *MonsterBattleInfo) GetBFGGCIILGDP() DeathSource {
	if x != nil {
		return x.BFGGCIILGDP
	}
	return DeathSource_UNKNOWN
}

func (x *MonsterBattleInfo) GetWave() uint32 {
	if x != nil {
		return x.Wave
	}
	return 0
}

func (x *MonsterBattleInfo) GetGACJAPHGNML() int32 {
	if x != nil {
		return x.GACJAPHGNML
	}
	return 0
}

func (x *MonsterBattleInfo) GetPhase() uint32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *MonsterBattleInfo) GetHCCPJHFOEMA() uint32 {
	if x != nil {
		return x.HCCPJHFOEMA
	}
	return 0
}

func (x *MonsterBattleInfo) GetOMBBCICKGLK() BattleTag {
	if x != nil {
		return x.OMBBCICKGLK
	}
	return BattleTag_TAG_NONE
}

func (x *MonsterBattleInfo) GetSkillInfo() []*LLNHNHHLCIP {
	if x != nil {
		return x.SkillInfo
	}
	return nil
}

func (x *MonsterBattleInfo) GetAMDHNDFLMGD() uint32 {
	if x != nil {
		return x.AMDHNDFLMGD
	}
	return 0
}

func (x *MonsterBattleInfo) GetBJFOPABIFMB() []*MonsterPhaseStt {
	if x != nil {
		return x.BJFOPABIFMB
	}
	return nil
}

func (x *MonsterBattleInfo) GetBMOLAPHKIKH() uint32 {
	if x != nil {
		return x.BMOLAPHKIKH
	}
	return 0
}

func (x *MonsterBattleInfo) GetMLNOOCHGLJP() uint32 {
	if x != nil {
		return x.MLNOOCHGLJP
	}
	return 0
}

func (x *MonsterBattleInfo) GetONLFPAADPNN() CMHFGEPJLFL {
	if x != nil {
		return x.ONLFPAADPNN
	}
	return CMHFGEPJLFL_NORMAL_CREATE
}

var File_MonsterBattleInfo_proto protoreflect.FileDescriptor

var file_MonsterBattleInfo_proto_rawDesc = []byte{
	0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4c, 0x4c, 0x4e, 0x48, 0x4e, 0x48,
	0x48, 0x4c, 0x43, 0x49, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x43, 0x4d, 0x48, 0x46, 0x47, 0x45, 0x50, 0x4a, 0x4c, 0x46, 0x4c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x44, 0x65, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x09, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x4c, 0x42, 0x4c, 0x4e,
	0x50, 0x50, 0x4e, 0x46, 0x4b, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x4c,
	0x42, 0x4c, 0x4e, 0x50, 0x50, 0x4e, 0x46, 0x4b, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x46, 0x4b,
	0x41, 0x4c, 0x4c, 0x4f, 0x4d, 0x46, 0x4d, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x50, 0x46, 0x4b, 0x41, 0x4c, 0x4c, 0x4f, 0x4d, 0x46, 0x4d, 0x41, 0x12, 0x32, 0x0a, 0x0b, 0x49,
	0x4b, 0x4f, 0x4e, 0x4f, 0x42, 0x47, 0x46, 0x41, 0x46, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0b, 0x49, 0x4b, 0x4f, 0x4e, 0x4f, 0x42, 0x47, 0x46, 0x41, 0x46, 0x4d, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x75, 0x72, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65,
	0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x4b, 0x48, 0x48, 0x4c, 0x49, 0x46, 0x4b, 0x44, 0x4f, 0x4f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x41, 0x4b, 0x48, 0x48, 0x4c, 0x49, 0x46, 0x4b, 0x44,
	0x4f, 0x4f, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x48, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x4b, 0x41, 0x4b, 0x42, 0x4a, 0x4a, 0x4a,
	0x4e, 0x46, 0x45, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4a, 0x4b, 0x41, 0x4b, 0x42,
	0x4a, 0x4a, 0x4a, 0x4e, 0x46, 0x45, 0x12, 0x43, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x46, 0x4a, 0x4c, 0x4d, 0x42, 0x48, 0x41, 0x4f, 0x47, 0x4d, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x49, 0x46, 0x4a, 0x4c, 0x4d, 0x42, 0x48, 0x41, 0x4f, 0x47, 0x4d,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x42, 0x46, 0x47, 0x47, 0x43,
	0x49, 0x49, 0x4c, 0x47, 0x44, 0x50, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x42, 0x46, 0x47, 0x47,
	0x43, 0x49, 0x49, 0x4c, 0x47, 0x44, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x61, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47,
	0x41, 0x43, 0x4a, 0x41, 0x50, 0x48, 0x47, 0x4e, 0x4d, 0x4c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x47, 0x41, 0x43, 0x4a, 0x41, 0x50, 0x48, 0x47, 0x4e, 0x4d, 0x4c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x43, 0x43, 0x50, 0x4a, 0x48, 0x46, 0x4f, 0x45,
	0x4d, 0x41, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x43, 0x43, 0x50, 0x4a, 0x48,
	0x46, 0x4f, 0x45, 0x4d, 0x41, 0x12, 0x2c, 0x0a, 0x0b, 0x4f, 0x4d, 0x42, 0x42, 0x43, 0x49, 0x43,
	0x4b, 0x47, 0x4c, 0x4b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x4f, 0x4d, 0x42, 0x42, 0x43, 0x49, 0x43, 0x4b,
	0x47, 0x4c, 0x4b, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x4c, 0x4e, 0x48, 0x4e, 0x48,
	0x48, 0x4c, 0x43, 0x49, 0x50, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x4d, 0x44, 0x48, 0x4e, 0x44, 0x46, 0x4c, 0x4d, 0x47, 0x44, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x4d, 0x44, 0x48, 0x4e, 0x44, 0x46, 0x4c, 0x4d,
	0x47, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x42, 0x4a, 0x46, 0x4f, 0x50, 0x41, 0x42, 0x49, 0x46, 0x4d,
	0x42, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x74, 0x52, 0x0b, 0x42, 0x4a, 0x46, 0x4f, 0x50,
	0x41, 0x42, 0x49, 0x46, 0x4d, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x4d, 0x4f, 0x4c, 0x41, 0x50,
	0x48, 0x4b, 0x49, 0x4b, 0x48, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x4d, 0x4f,
	0x4c, 0x41, 0x50, 0x48, 0x4b, 0x49, 0x4b, 0x48, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x4c, 0x4e, 0x4f,
	0x4f, 0x43, 0x48, 0x47, 0x4c, 0x4a, 0x50, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d,
	0x4c, 0x4e, 0x4f, 0x4f, 0x43, 0x48, 0x47, 0x4c, 0x4a, 0x50, 0x12, 0x2e, 0x0a, 0x0b, 0x4f, 0x4e,
	0x4c, 0x46, 0x50, 0x41, 0x41, 0x44, 0x50, 0x4e, 0x4e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x4d, 0x48, 0x46, 0x47, 0x45, 0x50, 0x4a, 0x4c, 0x46, 0x4c, 0x52, 0x0b, 0x4f,
	0x4e, 0x4c, 0x46, 0x50, 0x41, 0x41, 0x44, 0x50, 0x4e, 0x4e, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45,
	0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_MonsterBattleInfo_proto_rawDescOnce sync.Once
	file_MonsterBattleInfo_proto_rawDescData = file_MonsterBattleInfo_proto_rawDesc
)

func file_MonsterBattleInfo_proto_rawDescGZIP() []byte {
	file_MonsterBattleInfo_proto_rawDescOnce.Do(func() {
		file_MonsterBattleInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_MonsterBattleInfo_proto_rawDescData)
	})
	return file_MonsterBattleInfo_proto_rawDescData
}

var file_MonsterBattleInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_MonsterBattleInfo_proto_goTypes = []interface{}{
	(*MonsterBattleInfo)(nil),    // 0: MonsterBattleInfo
	(*MonsterProperty)(nil),      // 1: MonsterProperty
	(*AttackDamageProperty)(nil), // 2: AttackDamageProperty
	(*SkillUseProperty)(nil),     // 3: SkillUseProperty
	(DeathSource)(0),             // 4: DeathSource
	(BattleTag)(0),               // 5: BattleTag
	(*LLNHNHHLCIP)(nil),          // 6: LLNHNHHLCIP
	(*MonsterPhaseStt)(nil),      // 7: MonsterPhaseStt
	(CMHFGEPJLFL)(0),             // 8: CMHFGEPJLFL
}
var file_MonsterBattleInfo_proto_depIdxs = []int32{
	1, // 0: MonsterBattleInfo.IKONOBGFAFM:type_name -> MonsterProperty
	2, // 1: MonsterBattleInfo.attack_type_damage:type_name -> AttackDamageProperty
	3, // 2: MonsterBattleInfo.skill_times:type_name -> SkillUseProperty
	4, // 3: MonsterBattleInfo.BFGGCIILGDP:type_name -> DeathSource
	5, // 4: MonsterBattleInfo.OMBBCICKGLK:type_name -> BattleTag
	6, // 5: MonsterBattleInfo.skill_info:type_name -> LLNHNHHLCIP
	7, // 6: MonsterBattleInfo.BJFOPABIFMB:type_name -> MonsterPhaseStt
	8, // 7: MonsterBattleInfo.ONLFPAADPNN:type_name -> CMHFGEPJLFL
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_MonsterBattleInfo_proto_init() }
func file_MonsterBattleInfo_proto_init() {
	if File_MonsterBattleInfo_proto != nil {
		return
	}
	file_SkillUseProperty_proto_init()
	file_MonsterProperty_proto_init()
	file_LLNHNHHLCIP_proto_init()
	file_MonsterPhaseStt_proto_init()
	file_CMHFGEPJLFL_proto_init()
	file_AttackDamageProperty_proto_init()
	file_DeathSource_proto_init()
	file_BattleTag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MonsterBattleInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MonsterBattleInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MonsterBattleInfo_proto_goTypes,
		DependencyIndexes: file_MonsterBattleInfo_proto_depIdxs,
		MessageInfos:      file_MonsterBattleInfo_proto_msgTypes,
	}.Build()
	File_MonsterBattleInfo_proto = out.File
	file_MonsterBattleInfo_proto_rawDesc = nil
	file_MonsterBattleInfo_proto_goTypes = nil
	file_MonsterBattleInfo_proto_depIdxs = nil
}
