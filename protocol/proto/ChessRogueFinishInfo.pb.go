// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueFinishInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueFinishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AIPGGIIKGFB           uint32                   `protobuf:"varint,1840,opt,name=AIPGGIIKGFB,proto3" json:"AIPGGIIKGFB,omitempty"`
	CurLineup             *LineupInfo              `protobuf:"bytes,6,opt,name=cur_lineup,json=curLineup,proto3" json:"cur_lineup,omitempty"`
	FPPADIANMPM           uint32                   `protobuf:"varint,5,opt,name=FPPADIANMPM,proto3" json:"FPPADIANMPM,omitempty"`
	AreaId                uint32                   `protobuf:"varint,1022,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	NCGMINANPDH           *ItemList                `protobuf:"bytes,8,opt,name=NCGMINANPDH,proto3" json:"NCGMINANPDH,omitempty"`
	ScoreId               uint32                   `protobuf:"varint,603,opt,name=score_id,json=scoreId,proto3" json:"score_id,omitempty"`
	ChessRogueMainStoryId uint32                   `protobuf:"varint,13,opt,name=chess_rogue_main_story_id,json=chessRogueMainStoryId,proto3" json:"chess_rogue_main_story_id,omitempty"`
	AENGDLIPFDK           uint32                   `protobuf:"varint,1450,opt,name=AENGDLIPFDK,proto3" json:"AENGDLIPFDK,omitempty"`
	IIJDJGJJCLF           []uint32                 `protobuf:"varint,4,rep,packed,name=IIJDJGJJCLF,proto3" json:"IIJDJGJJCLF,omitempty"`
	NousStoryInfo         *ChessRogueNousStoryInfo `protobuf:"bytes,1088,opt,name=nous_story_info,json=nousStoryInfo,proto3" json:"nous_story_info,omitempty"`
	FinishType            ChessRogueFinishType     `protobuf:"varint,9,opt,name=finish_type,json=finishType,proto3,enum=ChessRogueFinishType" json:"finish_type,omitempty"`
	RogueBuffInfo         *ChessRogueBuff          `protobuf:"bytes,2,opt,name=rogue_buff_info,json=rogueBuffInfo,proto3" json:"rogue_buff_info,omitempty"`
	PCNPBFJAIHL           bool                     `protobuf:"varint,11,opt,name=PCNPBFJAIHL,proto3" json:"PCNPBFJAIHL,omitempty"`
	RogueVersionId        uint32                   `protobuf:"varint,1742,opt,name=rogue_version_id,json=rogueVersionId,proto3" json:"rogue_version_id,omitempty"`
	GameMiracleInfo       *ChessRogueMiracle       `protobuf:"bytes,12,opt,name=game_miracle_info,json=gameMiracleInfo,proto3" json:"game_miracle_info,omitempty"`
	DifficultyLevel       uint32                   `protobuf:"varint,15,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	ICMIAJMBMAP           uint32                   `protobuf:"varint,1,opt,name=ICMIAJMBMAP,proto3" json:"ICMIAJMBMAP,omitempty"`
	DNDOHHKOGMN           uint32                   `protobuf:"varint,14,opt,name=DNDOHHKOGMN,proto3" json:"DNDOHHKOGMN,omitempty"`
	CurLayerId            uint32                   `protobuf:"varint,7,opt,name=cur_layer_id,json=curLayerId,proto3" json:"cur_layer_id,omitempty"`
}

func (x *ChessRogueFinishInfo) Reset() {
	*x = ChessRogueFinishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueFinishInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueFinishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueFinishInfo) ProtoMessage() {}

func (x *ChessRogueFinishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueFinishInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueFinishInfo.ProtoReflect.Descriptor instead.
func (*ChessRogueFinishInfo) Descriptor() ([]byte, []int) {
	return file_ChessRogueFinishInfo_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueFinishInfo) GetAIPGGIIKGFB() uint32 {
	if x != nil {
		return x.AIPGGIIKGFB
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetCurLineup() *LineupInfo {
	if x != nil {
		return x.CurLineup
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetFPPADIANMPM() uint32 {
	if x != nil {
		return x.FPPADIANMPM
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetNCGMINANPDH() *ItemList {
	if x != nil {
		return x.NCGMINANPDH
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetScoreId() uint32 {
	if x != nil {
		return x.ScoreId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetChessRogueMainStoryId() uint32 {
	if x != nil {
		return x.ChessRogueMainStoryId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetAENGDLIPFDK() uint32 {
	if x != nil {
		return x.AENGDLIPFDK
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetIIJDJGJJCLF() []uint32 {
	if x != nil {
		return x.IIJDJGJJCLF
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetNousStoryInfo() *ChessRogueNousStoryInfo {
	if x != nil {
		return x.NousStoryInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetFinishType() ChessRogueFinishType {
	if x != nil {
		return x.FinishType
	}
	return ChessRogueFinishType_CHESS_ROGUE_ACCOUNT_BY_NONE
}

func (x *ChessRogueFinishInfo) GetRogueBuffInfo() *ChessRogueBuff {
	if x != nil {
		return x.RogueBuffInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetPCNPBFJAIHL() bool {
	if x != nil {
		return x.PCNPBFJAIHL
	}
	return false
}

func (x *ChessRogueFinishInfo) GetRogueVersionId() uint32 {
	if x != nil {
		return x.RogueVersionId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetGameMiracleInfo() *ChessRogueMiracle {
	if x != nil {
		return x.GameMiracleInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetICMIAJMBMAP() uint32 {
	if x != nil {
		return x.ICMIAJMBMAP
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetDNDOHHKOGMN() uint32 {
	if x != nil {
		return x.DNDOHHKOGMN
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetCurLayerId() uint32 {
	if x != nil {
		return x.CurLayerId
	}
	return 0
}

var File_ChessRogueFinishInfo_proto protoreflect.FileDescriptor

var file_ChessRogueFinishInfo_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x4e, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x06, 0x0a, 0x14, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x49, 0x50, 0x47, 0x47, 0x49, 0x49, 0x4b, 0x47, 0x46, 0x42,
	0x18, 0xb0, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x49, 0x50, 0x47, 0x47, 0x49, 0x49,
	0x4b, 0x47, 0x46, 0x42, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x75, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x50, 0x50, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x4d, 0x50, 0x4d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x50, 0x50, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x4d,
	0x50, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0xfe, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b,
	0x4e, 0x43, 0x47, 0x4d, 0x49, 0x4e, 0x41, 0x4e, 0x50, 0x44, 0x48, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x4e, 0x43,
	0x47, 0x4d, 0x49, 0x4e, 0x41, 0x4e, 0x50, 0x44, 0x48, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x6f, 0x67, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x41, 0x45, 0x4e, 0x47, 0x44, 0x4c, 0x49, 0x50, 0x46, 0x44, 0x4b, 0x18, 0xaa,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x45, 0x4e, 0x47, 0x44, 0x4c, 0x49, 0x50, 0x46,
	0x44, 0x4b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x49, 0x4a, 0x44, 0x4a, 0x47, 0x4a, 0x4a, 0x43, 0x4c,
	0x46, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x49, 0x4a, 0x44, 0x4a, 0x47, 0x4a,
	0x4a, 0x43, 0x4c, 0x46, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc0, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x75, 0x73, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e, 0x6f, 0x75, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0d, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x43, 0x4e, 0x50,
	0x42, 0x46, 0x4a, 0x41, 0x49, 0x48, 0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50,
	0x43, 0x4e, 0x50, 0x42, 0x46, 0x4a, 0x41, 0x49, 0x48, 0x4c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f,
	0x67, 0x75, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xce,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x43, 0x4d, 0x49, 0x41, 0x4a, 0x4d, 0x42, 0x4d, 0x41, 0x50, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x43, 0x4d, 0x49, 0x41, 0x4a, 0x4d, 0x42, 0x4d,
	0x41, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x4e, 0x44, 0x4f, 0x48, 0x48, 0x4b, 0x4f, 0x47, 0x4d,
	0x4e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x4e, 0x44, 0x4f, 0x48, 0x48, 0x4b,
	0x4f, 0x47, 0x4d, 0x4e, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x42, 0x28, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e,
	0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueFinishInfo_proto_rawDescOnce sync.Once
	file_ChessRogueFinishInfo_proto_rawDescData = file_ChessRogueFinishInfo_proto_rawDesc
)

func file_ChessRogueFinishInfo_proto_rawDescGZIP() []byte {
	file_ChessRogueFinishInfo_proto_rawDescOnce.Do(func() {
		file_ChessRogueFinishInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueFinishInfo_proto_rawDescData)
	})
	return file_ChessRogueFinishInfo_proto_rawDescData
}

var file_ChessRogueFinishInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueFinishInfo_proto_goTypes = []interface{}{
	(*ChessRogueFinishInfo)(nil),    // 0: ChessRogueFinishInfo
	(*LineupInfo)(nil),              // 1: LineupInfo
	(*ItemList)(nil),                // 2: ItemList
	(*ChessRogueNousStoryInfo)(nil), // 3: ChessRogueNousStoryInfo
	(ChessRogueFinishType)(0),       // 4: ChessRogueFinishType
	(*ChessRogueBuff)(nil),          // 5: ChessRogueBuff
	(*ChessRogueMiracle)(nil),       // 6: ChessRogueMiracle
}
var file_ChessRogueFinishInfo_proto_depIdxs = []int32{
	1, // 0: ChessRogueFinishInfo.cur_lineup:type_name -> LineupInfo
	2, // 1: ChessRogueFinishInfo.NCGMINANPDH:type_name -> ItemList
	3, // 2: ChessRogueFinishInfo.nous_story_info:type_name -> ChessRogueNousStoryInfo
	4, // 3: ChessRogueFinishInfo.finish_type:type_name -> ChessRogueFinishType
	5, // 4: ChessRogueFinishInfo.rogue_buff_info:type_name -> ChessRogueBuff
	6, // 5: ChessRogueFinishInfo.game_miracle_info:type_name -> ChessRogueMiracle
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ChessRogueFinishInfo_proto_init() }
func file_ChessRogueFinishInfo_proto_init() {
	if File_ChessRogueFinishInfo_proto != nil {
		return
	}
	file_ChessRogueMiracle_proto_init()
	file_ChessRogueNousStoryInfo_proto_init()
	file_ChessRogueBuff_proto_init()
	file_LineupInfo_proto_init()
	file_ChessRogueFinishType_proto_init()
	file_ItemList_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueFinishInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueFinishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueFinishInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueFinishInfo_proto_goTypes,
		DependencyIndexes: file_ChessRogueFinishInfo_proto_depIdxs,
		MessageInfos:      file_ChessRogueFinishInfo_proto_msgTypes,
	}.Build()
	File_ChessRogueFinishInfo_proto = out.File
	file_ChessRogueFinishInfo_proto_rawDesc = nil
	file_ChessRogueFinishInfo_proto_goTypes = nil
	file_ChessRogueFinishInfo_proto_depIdxs = nil
}
