// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: BattleStatistics.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BattleStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KBGAONBPDIN      uint32                       `protobuf:"varint,1,opt,name=KBGAONBPDIN,proto3" json:"KBGAONBPDIN,omitempty"`
	GPEKLDGJIJD      uint32                       `protobuf:"varint,2,opt,name=GPEKLDGJIJD,proto3" json:"GPEKLDGJIJD,omitempty"`
	AvatarIdList     []uint32                     `protobuf:"varint,3,rep,packed,name=avatar_id_list,json=avatarIdList,proto3" json:"avatar_id_list,omitempty"`
	NNHDFGHAIID      uint32                       `protobuf:"varint,4,opt,name=NNHDFGHAIID,proto3" json:"NNHDFGHAIID,omitempty"`
	JKOIAPKJDPO      float64                      `protobuf:"fixed64,5,opt,name=JKOIAPKJDPO,proto3" json:"JKOIAPKJDPO,omitempty"`
	IJODDPFHNGA      float64                      `protobuf:"fixed64,6,opt,name=IJODDPFHNGA,proto3" json:"IJODDPFHNGA,omitempty"`
	AvatarBattleList []*AvatarBattleInfo          `protobuf:"bytes,7,rep,name=avatar_battle_list,json=avatarBattleList,proto3" json:"avatar_battle_list,omitempty"`
	GHNLBEJDLBO      []*MonsterBattleInfo         `protobuf:"bytes,8,rep,name=GHNLBEJDLBO,proto3" json:"GHNLBEJDLBO,omitempty"`
	RoundCnt         uint32                       `protobuf:"varint,9,opt,name=round_cnt,json=roundCnt,proto3" json:"round_cnt,omitempty"`
	DAIGKHEGLDN      uint32                       `protobuf:"varint,10,opt,name=DAIGKHEGLDN,proto3" json:"DAIGKHEGLDN,omitempty"`
	ILMABLEHGJB      uint32                       `protobuf:"varint,11,opt,name=ILMABLEHGJB,proto3" json:"ILMABLEHGJB,omitempty"`
	PCFHNPKMDLM      uint32                       `protobuf:"varint,12,opt,name=PCFHNPKMDLM,proto3" json:"PCFHNPKMDLM,omitempty"`
	OLIPFAOFNMM      map[string]float32           `protobuf:"bytes,13,rep,name=OLIPFAOFNMM,proto3" json:"OLIPFAOFNMM,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	ChallengeScore   uint32                       `protobuf:"varint,14,opt,name=challenge_score,json=challengeScore,proto3" json:"challenge_score,omitempty"`
	LAIPIPBIAJO      []*BattleEventBattleInfo     `protobuf:"bytes,16,rep,name=LAIPIPBIAJO,proto3" json:"LAIPIPBIAJO,omitempty"`
	EndReason        BattleEndReason              `protobuf:"varint,19,opt,name=end_reason,json=endReason,proto3,enum=BattleEndReason" json:"end_reason,omitempty"`
	MBBAAEJEOCE      []*DOKOPGLKKHI               `protobuf:"bytes,21,rep,name=MBBAAEJEOCE,proto3" json:"MBBAAEJEOCE,omitempty"`
	CFEICHNIMIE      []int32                      `protobuf:"varint,22,rep,packed,name=CFEICHNIMIE,proto3" json:"CFEICHNIMIE,omitempty"`
	ONNCKMFENGL      []*OGLNJNIACHP               `protobuf:"bytes,23,rep,name=ONNCKMFENGL,proto3" json:"ONNCKMFENGL,omitempty"`
	JGCDMOOFFNF      []*JEPHONMEKHD               `protobuf:"bytes,26,rep,name=JGCDMOOFFNF,proto3" json:"JGCDMOOFFNF,omitempty"`
	FHGHMFBLMDO      []*EKOPDGAFLDA               `protobuf:"bytes,27,rep,name=FHGHMFBLMDO,proto3" json:"FHGHMFBLMDO,omitempty"`
	BattleTargetInfo map[uint32]*BattleTargetList `protobuf:"bytes,28,rep,name=battle_target_info,json=battleTargetInfo,proto3" json:"battle_target_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PJNMBLDJIFM      []*HKFCDGJGIPF               `protobuf:"bytes,29,rep,name=PJNMBLDJIFM,proto3" json:"PJNMBLDJIFM,omitempty"`
	FEMLOIIPHOP      *EvolveBuildBattleInfo       `protobuf:"bytes,30,opt,name=FEMLOIIPHOP,proto3" json:"FEMLOIIPHOP,omitempty"`
	EDNOFEBKPBG      *DJIHHDALBGK                 `protobuf:"bytes,31,opt,name=EDNOFEBKPBG,proto3" json:"EDNOFEBKPBG,omitempty"`
}

func (x *BattleStatistics) Reset() {
	*x = BattleStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BattleStatistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleStatistics) ProtoMessage() {}

func (x *BattleStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_BattleStatistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleStatistics.ProtoReflect.Descriptor instead.
func (*BattleStatistics) Descriptor() ([]byte, []int) {
	return file_BattleStatistics_proto_rawDescGZIP(), []int{0}
}

func (x *BattleStatistics) GetKBGAONBPDIN() uint32 {
	if x != nil {
		return x.KBGAONBPDIN
	}
	return 0
}

func (x *BattleStatistics) GetGPEKLDGJIJD() uint32 {
	if x != nil {
		return x.GPEKLDGJIJD
	}
	return 0
}

func (x *BattleStatistics) GetAvatarIdList() []uint32 {
	if x != nil {
		return x.AvatarIdList
	}
	return nil
}

func (x *BattleStatistics) GetNNHDFGHAIID() uint32 {
	if x != nil {
		return x.NNHDFGHAIID
	}
	return 0
}

func (x *BattleStatistics) GetJKOIAPKJDPO() float64 {
	if x != nil {
		return x.JKOIAPKJDPO
	}
	return 0
}

func (x *BattleStatistics) GetIJODDPFHNGA() float64 {
	if x != nil {
		return x.IJODDPFHNGA
	}
	return 0
}

func (x *BattleStatistics) GetAvatarBattleList() []*AvatarBattleInfo {
	if x != nil {
		return x.AvatarBattleList
	}
	return nil
}

func (x *BattleStatistics) GetGHNLBEJDLBO() []*MonsterBattleInfo {
	if x != nil {
		return x.GHNLBEJDLBO
	}
	return nil
}

func (x *BattleStatistics) GetRoundCnt() uint32 {
	if x != nil {
		return x.RoundCnt
	}
	return 0
}

func (x *BattleStatistics) GetDAIGKHEGLDN() uint32 {
	if x != nil {
		return x.DAIGKHEGLDN
	}
	return 0
}

func (x *BattleStatistics) GetILMABLEHGJB() uint32 {
	if x != nil {
		return x.ILMABLEHGJB
	}
	return 0
}

func (x *BattleStatistics) GetPCFHNPKMDLM() uint32 {
	if x != nil {
		return x.PCFHNPKMDLM
	}
	return 0
}

func (x *BattleStatistics) GetOLIPFAOFNMM() map[string]float32 {
	if x != nil {
		return x.OLIPFAOFNMM
	}
	return nil
}

func (x *BattleStatistics) GetChallengeScore() uint32 {
	if x != nil {
		return x.ChallengeScore
	}
	return 0
}

func (x *BattleStatistics) GetLAIPIPBIAJO() []*BattleEventBattleInfo {
	if x != nil {
		return x.LAIPIPBIAJO
	}
	return nil
}

func (x *BattleStatistics) GetEndReason() BattleEndReason {
	if x != nil {
		return x.EndReason
	}
	return BattleEndReason_BATTLE_END_REASON_NONE
}

func (x *BattleStatistics) GetMBBAAEJEOCE() []*DOKOPGLKKHI {
	if x != nil {
		return x.MBBAAEJEOCE
	}
	return nil
}

func (x *BattleStatistics) GetCFEICHNIMIE() []int32 {
	if x != nil {
		return x.CFEICHNIMIE
	}
	return nil
}

func (x *BattleStatistics) GetONNCKMFENGL() []*OGLNJNIACHP {
	if x != nil {
		return x.ONNCKMFENGL
	}
	return nil
}

func (x *BattleStatistics) GetJGCDMOOFFNF() []*JEPHONMEKHD {
	if x != nil {
		return x.JGCDMOOFFNF
	}
	return nil
}

func (x *BattleStatistics) GetFHGHMFBLMDO() []*EKOPDGAFLDA {
	if x != nil {
		return x.FHGHMFBLMDO
	}
	return nil
}

func (x *BattleStatistics) GetBattleTargetInfo() map[uint32]*BattleTargetList {
	if x != nil {
		return x.BattleTargetInfo
	}
	return nil
}

func (x *BattleStatistics) GetPJNMBLDJIFM() []*HKFCDGJGIPF {
	if x != nil {
		return x.PJNMBLDJIFM
	}
	return nil
}

func (x *BattleStatistics) GetFEMLOIIPHOP() *EvolveBuildBattleInfo {
	if x != nil {
		return x.FEMLOIIPHOP
	}
	return nil
}

func (x *BattleStatistics) GetEDNOFEBKPBG() *DJIHHDALBGK {
	if x != nil {
		return x.EDNOFEBKPBG
	}
	return nil
}

var File_BattleStatistics_proto protoreflect.FileDescriptor

var file_BattleStatistics_proto_rawDesc = []byte{
	0x0a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x45, 0x4b, 0x4f, 0x50, 0x44, 0x47,
	0x41, 0x46, 0x4c, 0x44, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x45, 0x76, 0x6f,
	0x6c, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x44, 0x4f, 0x4b, 0x4f, 0x50, 0x47,
	0x4c, 0x4b, 0x4b, 0x48, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x4a, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x4d, 0x45, 0x4b, 0x48, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x44, 0x4a, 0x49, 0x48, 0x48, 0x44, 0x41, 0x4c, 0x42, 0x47, 0x4b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x48, 0x4b, 0x46, 0x43, 0x44, 0x47, 0x4a, 0x47, 0x49, 0x50, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x4f, 0x47, 0x4c, 0x4e, 0x4a, 0x4e, 0x49, 0x41, 0x43, 0x48, 0x50, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x0a, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x42, 0x47,
	0x41, 0x4f, 0x4e, 0x42, 0x50, 0x44, 0x49, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x4b, 0x42, 0x47, 0x41, 0x4f, 0x4e, 0x42, 0x50, 0x44, 0x49, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x47,
	0x50, 0x45, 0x4b, 0x4c, 0x44, 0x47, 0x4a, 0x49, 0x4a, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x47, 0x50, 0x45, 0x4b, 0x4c, 0x44, 0x47, 0x4a, 0x49, 0x4a, 0x44, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x4e, 0x48, 0x44, 0x46, 0x47, 0x48, 0x41, 0x49,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4e, 0x4e, 0x48, 0x44, 0x46, 0x47,
	0x48, 0x41, 0x49, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x4b, 0x4f, 0x49, 0x41, 0x50, 0x4b,
	0x4a, 0x44, 0x50, 0x4f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4a, 0x4b, 0x4f, 0x49,
	0x41, 0x50, 0x4b, 0x4a, 0x44, 0x50, 0x4f, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x4a, 0x4f, 0x44, 0x44,
	0x50, 0x46, 0x48, 0x4e, 0x47, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x49, 0x4a,
	0x4f, 0x44, 0x44, 0x50, 0x46, 0x48, 0x4e, 0x47, 0x41, 0x12, 0x3f, 0x0a, 0x12, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x48,
	0x4e, 0x4c, 0x42, 0x45, 0x4a, 0x44, 0x4c, 0x42, 0x4f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x47, 0x48, 0x4e, 0x4c, 0x42, 0x45, 0x4a, 0x44, 0x4c, 0x42, 0x4f,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x41, 0x49, 0x47, 0x4b, 0x48, 0x45, 0x47, 0x4c, 0x44, 0x4e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x44, 0x41, 0x49, 0x47, 0x4b, 0x48, 0x45, 0x47, 0x4c, 0x44, 0x4e, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x4c, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x48, 0x47, 0x4a, 0x42, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x4c, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x48, 0x47, 0x4a,
	0x42, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x43, 0x46, 0x48, 0x4e, 0x50, 0x4b, 0x4d, 0x44, 0x4c, 0x4d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x43, 0x46, 0x48, 0x4e, 0x50, 0x4b, 0x4d,
	0x44, 0x4c, 0x4d, 0x12, 0x44, 0x0a, 0x0b, 0x4f, 0x4c, 0x49, 0x50, 0x46, 0x41, 0x4f, 0x46, 0x4e,
	0x4d, 0x4d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x4c, 0x49, 0x50,
	0x46, 0x41, 0x4f, 0x46, 0x4e, 0x4d, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4f, 0x4c,
	0x49, 0x50, 0x46, 0x41, 0x4f, 0x46, 0x4e, 0x4d, 0x4d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x4c, 0x41, 0x49, 0x50, 0x49, 0x50, 0x42, 0x49, 0x41, 0x4a,
	0x4f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x4c, 0x41, 0x49, 0x50, 0x49, 0x50, 0x42, 0x49, 0x41, 0x4a, 0x4f, 0x12, 0x2f, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x0b, 0x4d, 0x42, 0x42, 0x41, 0x41, 0x45, 0x4a, 0x45, 0x4f, 0x43, 0x45, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x4f, 0x4b, 0x4f, 0x50, 0x47, 0x4c, 0x4b, 0x4b, 0x48, 0x49,
	0x52, 0x0b, 0x4d, 0x42, 0x42, 0x41, 0x41, 0x45, 0x4a, 0x45, 0x4f, 0x43, 0x45, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x46, 0x45, 0x49, 0x43, 0x48, 0x4e, 0x49, 0x4d, 0x49, 0x45, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x46, 0x45, 0x49, 0x43, 0x48, 0x4e, 0x49, 0x4d, 0x49, 0x45, 0x12,
	0x2e, 0x0a, 0x0b, 0x4f, 0x4e, 0x4e, 0x43, 0x4b, 0x4d, 0x46, 0x45, 0x4e, 0x47, 0x4c, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x47, 0x4c, 0x4e, 0x4a, 0x4e, 0x49, 0x41, 0x43,
	0x48, 0x50, 0x52, 0x0b, 0x4f, 0x4e, 0x4e, 0x43, 0x4b, 0x4d, 0x46, 0x45, 0x4e, 0x47, 0x4c, 0x12,
	0x2e, 0x0a, 0x0b, 0x4a, 0x47, 0x43, 0x44, 0x4d, 0x4f, 0x4f, 0x46, 0x46, 0x4e, 0x46, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x4d, 0x45, 0x4b,
	0x48, 0x44, 0x52, 0x0b, 0x4a, 0x47, 0x43, 0x44, 0x4d, 0x4f, 0x4f, 0x46, 0x46, 0x4e, 0x46, 0x12,
	0x2e, 0x0a, 0x0b, 0x46, 0x48, 0x47, 0x48, 0x4d, 0x46, 0x42, 0x4c, 0x4d, 0x44, 0x4f, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x4b, 0x4f, 0x50, 0x44, 0x47, 0x41, 0x46, 0x4c,
	0x44, 0x41, 0x52, 0x0b, 0x46, 0x48, 0x47, 0x48, 0x4d, 0x46, 0x42, 0x4c, 0x4d, 0x44, 0x4f, 0x12,
	0x55, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0b, 0x50, 0x4a, 0x4e, 0x4d, 0x42, 0x4c,
	0x44, 0x4a, 0x49, 0x46, 0x4d, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x4b,
	0x46, 0x43, 0x44, 0x47, 0x4a, 0x47, 0x49, 0x50, 0x46, 0x52, 0x0b, 0x50, 0x4a, 0x4e, 0x4d, 0x42,
	0x4c, 0x44, 0x4a, 0x49, 0x46, 0x4d, 0x12, 0x38, 0x0a, 0x0b, 0x46, 0x45, 0x4d, 0x4c, 0x4f, 0x49,
	0x49, 0x50, 0x48, 0x4f, 0x50, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x46, 0x45, 0x4d, 0x4c, 0x4f, 0x49, 0x49, 0x50, 0x48, 0x4f, 0x50,
	0x12, 0x2e, 0x0a, 0x0b, 0x45, 0x44, 0x4e, 0x4f, 0x46, 0x45, 0x42, 0x4b, 0x50, 0x42, 0x47, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x4a, 0x49, 0x48, 0x48, 0x44, 0x41, 0x4c,
	0x42, 0x47, 0x4b, 0x52, 0x0b, 0x45, 0x44, 0x4e, 0x4f, 0x46, 0x45, 0x42, 0x4b, 0x50, 0x42, 0x47,
	0x1a, 0x3e, 0x0a, 0x10, 0x4f, 0x4c, 0x49, 0x50, 0x46, 0x41, 0x4f, 0x46, 0x4e, 0x4d, 0x4d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x56, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x28, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44,
	0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BattleStatistics_proto_rawDescOnce sync.Once
	file_BattleStatistics_proto_rawDescData = file_BattleStatistics_proto_rawDesc
)

func file_BattleStatistics_proto_rawDescGZIP() []byte {
	file_BattleStatistics_proto_rawDescOnce.Do(func() {
		file_BattleStatistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_BattleStatistics_proto_rawDescData)
	})
	return file_BattleStatistics_proto_rawDescData
}

var file_BattleStatistics_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_BattleStatistics_proto_goTypes = []interface{}{
	(*BattleStatistics)(nil),      // 0: BattleStatistics
	nil,                           // 1: BattleStatistics.OLIPFAOFNMMEntry
	nil,                           // 2: BattleStatistics.BattleTargetInfoEntry
	(*AvatarBattleInfo)(nil),      // 3: AvatarBattleInfo
	(*MonsterBattleInfo)(nil),     // 4: MonsterBattleInfo
	(*BattleEventBattleInfo)(nil), // 5: BattleEventBattleInfo
	(BattleEndReason)(0),          // 6: BattleEndReason
	(*DOKOPGLKKHI)(nil),           // 7: DOKOPGLKKHI
	(*OGLNJNIACHP)(nil),           // 8: OGLNJNIACHP
	(*JEPHONMEKHD)(nil),           // 9: JEPHONMEKHD
	(*EKOPDGAFLDA)(nil),           // 10: EKOPDGAFLDA
	(*HKFCDGJGIPF)(nil),           // 11: HKFCDGJGIPF
	(*EvolveBuildBattleInfo)(nil), // 12: EvolveBuildBattleInfo
	(*DJIHHDALBGK)(nil),           // 13: DJIHHDALBGK
	(*BattleTargetList)(nil),      // 14: BattleTargetList
}
var file_BattleStatistics_proto_depIdxs = []int32{
	3,  // 0: BattleStatistics.avatar_battle_list:type_name -> AvatarBattleInfo
	4,  // 1: BattleStatistics.GHNLBEJDLBO:type_name -> MonsterBattleInfo
	1,  // 2: BattleStatistics.OLIPFAOFNMM:type_name -> BattleStatistics.OLIPFAOFNMMEntry
	5,  // 3: BattleStatistics.LAIPIPBIAJO:type_name -> BattleEventBattleInfo
	6,  // 4: BattleStatistics.end_reason:type_name -> BattleEndReason
	7,  // 5: BattleStatistics.MBBAAEJEOCE:type_name -> DOKOPGLKKHI
	8,  // 6: BattleStatistics.ONNCKMFENGL:type_name -> OGLNJNIACHP
	9,  // 7: BattleStatistics.JGCDMOOFFNF:type_name -> JEPHONMEKHD
	10, // 8: BattleStatistics.FHGHMFBLMDO:type_name -> EKOPDGAFLDA
	2,  // 9: BattleStatistics.battle_target_info:type_name -> BattleStatistics.BattleTargetInfoEntry
	11, // 10: BattleStatistics.PJNMBLDJIFM:type_name -> HKFCDGJGIPF
	12, // 11: BattleStatistics.FEMLOIIPHOP:type_name -> EvolveBuildBattleInfo
	13, // 12: BattleStatistics.EDNOFEBKPBG:type_name -> DJIHHDALBGK
	14, // 13: BattleStatistics.BattleTargetInfoEntry.value:type_name -> BattleTargetList
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_BattleStatistics_proto_init() }
func file_BattleStatistics_proto_init() {
	if File_BattleStatistics_proto != nil {
		return
	}
	file_BattleEndReason_proto_init()
	file_MonsterBattleInfo_proto_init()
	file_EKOPDGAFLDA_proto_init()
	file_EvolveBuildBattleInfo_proto_init()
	file_DOKOPGLKKHI_proto_init()
	file_BattleEventBattleInfo_proto_init()
	file_BattleTargetList_proto_init()
	file_JEPHONMEKHD_proto_init()
	file_DJIHHDALBGK_proto_init()
	file_AvatarBattleInfo_proto_init()
	file_HKFCDGJGIPF_proto_init()
	file_OGLNJNIACHP_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_BattleStatistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BattleStatistics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BattleStatistics_proto_goTypes,
		DependencyIndexes: file_BattleStatistics_proto_depIdxs,
		MessageInfos:      file_BattleStatistics_proto_msgTypes,
	}.Build()
	File_BattleStatistics_proto = out.File
	file_BattleStatistics_proto_rawDesc = nil
	file_BattleStatistics_proto_goTypes = nil
	file_BattleStatistics_proto_depIdxs = nil
}
